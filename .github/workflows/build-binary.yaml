name: "build-binary"
on:
  push:
    branches:
      - master
env:
  RTT_EXEC_PATH: "/opt/arm/gcc"
  BUILD_ENV: "production"
  GCC_OPT: "s"

jobs:
  cancel:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - name: cancel running workflows
        uses: GongT/cancel-previous-workflows@6dd7af8389c9434cc893fd33b58609e73db49fbe
        env:
          DELETE: "yes"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    name: "build application binary"
    runs-on: ubuntu-latest
    env:
      GCC_VERSION: 10-2020-q4
    steps:
      - name: Install Arm GCC
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          clean: true
      - name: remove .vscode and set basic environment
        run: |
          rm -rf .vscode
          mkdir .vscode
          echo "RTT_ROOT=$(pwd)/rt-thread" >> $GITHUB_ENV

      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: "x64"
      - name: Install SCons and build dependencies
        run: |
          pip install SCons
          pip install -r rt-thread-w60x/requirements.txt

      - name: Cache Arm GCC
        id: gcc-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-arm-gcc
        with:
          path: |
            ${{env.RTT_EXEC_PATH}}
          key: gcc-${{ env.GCC_VERSION }}

      - name: Install Arm GCC
        uses: fiam/arm-none-eabi-gcc@v1
        if: steps.gcc-cache.outputs.cache-hit != 'true'
        with:
          release: ${{ env.GCC_VERSION }} # The arm-none-eabi-gcc release to use.
          directory: ${{env.RTT_EXEC_PATH}}

      - name: Cache packages
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            packages
            rt-thread
          key: packages-${{ hashFiles('.config') }}
          restore-keys: |
            packages-${{ hashFiles('.config') }}
            packages-

      - name: Clone RT-Thread sources
        run: python control.py rtt update v4.0.3 --github
      - name: Get RTT packages
        run: |
          sed -i '/SYS_PKGS_DOWNLOAD_ACCELERATE/d' .config
          python control.py pkgs --force-update

      - name: Build
        run: |
          sed -i '/_FINSH/d' .config
          python control.py scons

      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: "Latest Build"
          files: |
            Bin/application.fls
            Bin/application.img

  publish:
    name: publish to my host
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download assets
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: "latest"
          file: "application.img"
          target: "application.img"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup SSH Keys and known_hosts
        run: |
          export SSH_AUTH_SOCK=$(mktemp --dry-run)
          echo "::add-mask::$SSH_AUTH_SOCK"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"

          export SSH_CONFIG_FILE=$(mktemp --dry-run)
          echo "${{ secrets.DEPLOY_SSH_CONFIG }}" > "$SSH_CONFIG_FILE"
          echo "SSH_CONFIG_FILE=$SSH_CONFIG_FILE" >> $GITHUB_ENV
          chmod 0600 "$SSH_CONFIG_FILE"

      - name: Copy to My Server
        run: |
          ssh -F $SSH_CONFIG_FILE target mkdir -p /data/AppData/data/iot/plug/
          scp -vF $SSH_CONFIG_FILE application.img target:/data/AppData/data/iot/plug/
